# Урок 1
# 1)прикладные (игры, мессенджеры, бухгалтерские программы)
# 2)системные (операционные системы, сети, написание интерфейсов, базы данных)
# 3)веб-программисты (Создание сайтов, страниц, веб-итерфейс)
# Плюсы и минусы:
# Плюсы:
# 1) Востребованность
# 2) Высокая зарабатная плата
# 3) Обучение самостоятельно возможно
# Минусы:
# 1) Быстрая забываемость
# 2) Неравномерное распределение работы
# Программа - это алгоритм на одном из языков программирования, или же это набор команд
# Команда - это описания действий для компьютера
#
# Языки программирования бывают:
# 1) низкоуровневые - каждая команда соответствует одной команде процессора (символы, цифры)
# 2) высокоуровневые - каждая команда приближена к естественному(на английском, для понимания человека)
# Программа состоит из 3 компонентов:
# 1) константы постоянная величина, у которой есть имя. В питоне констант нет
# 2) переменные - изменяющаяся величина, имеющая имя (ячейка памяти компьютера)
# 3) функции - вспомогательный алгоритм для выполнения вычислений
#
#
# ПЕРЕМЕННЫЕ
# Для создания переменных, нужно задать ей имя
# Требование для имени:
# 1) Могут включать - в себя латинские буквы (a-z), (цифры и знаки подчёркивания(_))
# 2) Имена не должны включать - другие языки, пробелы, знаки, нельзя начинать с цифр)
# Переменные B и b - будут восприниматься как разные переменные
# 1)числовой (int - целое число: 1, 3, 123541235)
# 2)float - вещественные/дробные: 2.4, 3.14, 0.0000001 и т.д.
# 3)str - символьная строка: 'abc', 'мама', 'abc123'
# 4)bool - логический (булевский) тип данных. Имеет два значения: Truu, False
#
# КОММЕНТАРИИ
# В пайтоне признаком комментария является символ решётки #я лох
# Решётка в начале строки делают эту строку неактивной для программы
# Чтобы закомментировать сразу несколько строк, нужно их выделись и использовать сочетание ctr+/
#  a = 2 #создали переменную типа int
# pi = 3.14 #создали переменную типа float
# s = 'hello, World' #переменна типа str
# t = True # переменная типа boll
#
#
#  Встроенные функции
#
#
# Функция вывода информации на экран - print()
# print - выводит информацию в скобках на экран
# Выведем на экран созданные 4 переменные:
# print(a)
#  print(pi)
#  print(s)
# print(t)
#  print("Демонстрационный текст")
#  print("bear"+"Free")
# Операторы - команда языка высокого уровня
# оператор присваивания (=) служит для изменения значения переменной
# Есть другие операторы: +=, -=, *=, /= и т.д.
# A = 1
# # A = A + 2
# # print (A)
# A += 2
# print(A)
# import math
# import random
# import random

#операции над числами
# Сложение a = 2+2
# Вычетание a = 2-1
# умножение a = 2*2
# деление a = 2/2
# целочисленное деление a = 2//2
# остаток от деления a = 4%3
# степень a = 2**3

# a = 2
# print(type(a))
# a = 3.123
# a = str(a)
# print(type(a))
# a = 2
# print('Переменная а равна:', a)

#Функция input нужна для самостоятельного ввода пользователем
# b = input ('Ведите дату рождения: ')
# print(type(b))
# a = int(input('Напишите свою дату рождения: '))
# print(a)
# print(a+100)
# a = int(input("Ввод"))
# print(a)
# a = input() #input можно оставлять пустым, но тогда не будет комментария
# Узнать местоположение можно с помощью print(id('Здесь переменная'))
# a = 10
# print(id(a))
# b = 20
# print(id(b))



# ДЗ на вторник:
# 1) Создать переменные со всеми типами данных
# 2) Написать все математические операции с двумя переменными a,b
# 3) Прочитать про библиотеки math и random
#Файл назвать Senko_lesson_1.py
#Дз сдать до вторника




































# Урок 2

# import random
# print(random.randint(1,100)) #случайное целое число
# print(random.random()) #float от 0 до 1
# print(random.randrange(10,90,5)) #аналогочино randint только с указанием шага


# import math
#math.sqrt() #корень квадратный
# print(math.exp(1)) #экспонента возводится в указаную степень (2.7)

#import random

# n = random.randint(100, 999)
# print(n)
#Task 1. сумма цифр 3-ёх знач числа
# print(n//100) #первая цифра
# print(n//10%10) #вторая цифра
# print(n%100//10) #вторая цифра (также)
# print(n%10) #третья цифра
# a = n//100
# b = n//10%10
# c = n%10
# print('Сумма цифр числа: ', a+b+c)

#Операторы сравнения
#Операторы ветвления (операторы условия)
#Тип данных bool
#Операторы or, and, not


#Операторы сравнения

# print(2 == 2) # (==) оператор равенства. Провеверяет оба ли значения равны
# print(2 != 3) # (!=) оператор (не равно). True если числа не равны
# print(2 >3 ) # (>) если первое число больше True
# print(2 <3 )
# print(2 <=2 ) # (<=) или (>=) не строгие знаки сравнения


#Операторы ветвления
# Оператор (If)
# if выполнит какие-то команды, если условие истенно (True), иначе не выполнит
# if <условие>:
#     <команда 1>
#     <команда 2>
#     <команда 3>
# ветвление за счёт табуляции
# a = 3
# if a < 1:
#     print("Всё хорошо работает")
# else:
#     print('Всё плохо работает')
# if True:
#     print('Привет')
# if False:
#     print('Привет')
# if 'Hello':
#     print('Hello')
# if 0:
#     print('Hello')
#Любые цифры или латин. буквы это  True - 0 или пустая строка это False

#Конструкция If-else

# if условие:
#     команда 1
#     команда 2
# else:
#     команда 1
#     команда 2

# a = 2
# if a<1:
#     print('Меньше')
# else:
#     print('Больше')
#Task 2. спросить число и проверить на чётность

# a = float(input('Введите число: '))
# if a%2 == 0:
#     print('Чётное')
# else:
#     print('Нечётное')
#Конструкция if-elif-else
# if выражение:
#     команда
# elif выражение 2:
#     комадна 2
# elif выражение 3:
#     команда 3:
# else:
#     команда 4

# a = int(input('Введите число: '))
# if a<0:
#     print('Отрицательное')
# elif a == 0:
#     print('Ровно 0')
# else:
#     print('Положительное')

#Операторы (or and not)

#and - логическая 'И'. Выражение истинно если оба выражения истинны
# print(2==2 and 3==3)
# print(2==3 and 4==3)   and должно быть всё правильно
# print(2==2 and 3==4)

#or - логическая 'или'. Одного правильного выражения достаточно
# print(2==4 or 3==3 or 4==5)
# print(2==2 or 3==4)
# print('a'=='b' or 'hello'=='HELLO' or 1==1)
# print(2+2==4 and 'hello'=="HELLo")
# print(2==2 or 3==3 and 4==5) #True
# a = 3
# b = -2
# c = True
# if a>0 and b<0:
#     print('and')
# elif a>0 or b<0:
#     print('or')
#Not
# if not c == False
#     print('not') #not - логическое отрецание. not True  -> False

#Task 3. Определить наибольшее
# a = float(input('Напишите число: '))
# b = float(input('Напишите число: '))
# c = float(input('Напишите число: '))
# if a>b or a>c:
#     print('a')
# elif b>c or b>a:
#     print('b')
# else:
#     print('c')






#Дз на пятницу
# 1. Определить, является ли введённый год високосным
    # 3 условия: деление на 4, на 100, на 400.
# 2. Определить, существует ли треугольник с заданными тремя сторонами.
    # условие: каждая сторона меньше суммы двух других
# 3. определить принадлежит ли точка кругу. Ввести координаты точки и радиус круга.
    # по формуле пифагора можно вычеслить, расстояние от центра круга до точки.
# 4. придумать свою задачу на тему if-elif-else







































# Урок 3. Строки (str)


#реализация строк в пайтоне
#Коллекция - это условное название таких типов данных, которые состоят из нескольких элементов
# Примеры коллекций: строки, списки, кортежи, множества, словари и т.д.
# Строки - это упорядоченные неизменяемые последовательности  символов
# Используются для хранения и предоставления текстовой информации
#'abcdef'
#a - 0
#b - 1
#c - 2
#d - 3
#e - 4
#f - 5
#номер (позиция) в строке, называется ИНДЕКС
#Способы создания строк
# 1)С помощью кавычек
# first_string = 'Текст в одинарных кавычках'
# second_string = "Текст в двойных кавычках"
# example_streing = "Термин 'Python' переводится как змея"
# ex_3_str = "i'm learning python
#
# #2) С помощью 3-ых кавычек
# my_string = '''Это какая-то очень длинная строка, ей нужно много "места" '''

# 3) С помощью команды 'str'
# my_num = 12345
# my_str = str(my_num)
# print(type(my_str))



#Операция со строками

# 1) Операция сложения строк (конкотенация)
# a = 'abc'
# b = 'cde'
# print(a + b)

# 2) Умножение строк (*)
# my_str = 'Строка'
# print(my_str*5) #(дублируется 5 раз)

# 3) Длина строки (len)
# print(len('abcqwe')) #показывает кол-во символов в строке
#пустая строка не ялвяется символом

#Task 1. Спросить у пользователя имя, затем вывести на экран "Привет имя"
# вторая строка
# a = input('Введите имя: ')
# print("Привет, " + a)
# print(a * 3)
#'\t' - одна табуляция


#Срезы. Подстроки
#Срезы используют для всех типов данных из коллекций (и, строки, множества и т.д.)
#Срез (slice) - извлечение части строки или другой какой-то последовательности
#Индекс это номер символа в строке (начиная с нуля)
#Индекс может быть отрицательным. Начиная с -1
#Пример: 'abcdef'
#a - индекс: 0  или -6
#b - индекс: 1 или -5

#Формы среза
#1) Взять один символ из строки s[i], где s - строка, i - это индекс искомого элемента
# s = 'Hello'
# print(s[0], s[4], s[-5])
# print(s[len(s)//2]) #В идексе будет позиция центрального символа


# 2) Вторая форма среза. Срез с двумя параметрами: s[a:b]
#s[a:b] вернёт подстроку из s начиная с символа на позиции a до символа с индексом b, но b не включено
# s = 'Python'
#Вся строка
# print(s[0:6])
#Со второго до предпоследнего
# print(s[1:5])

#Если не указать второй параметр, то печать будет до конца строки
# print(s[1:]) с первого до последнего
# print(s[:-5]) сначала до -5
# print(s[:]) аналогично print(s)


# 3) Третья форма среза. S[a:b:c]. Третий параметр - шаг среза. По умолчанию равен 1

# s = 'Program'
# print(s[0::1], s[::], s[::2])

#Строки изменять нельзя, любые операции со строками создают новые строки, но не меняют старые.
#В старую переменную можно присвоить новую строку.

# s = 'ggg'

#Task 2. найти сумму чисел случайного 3-йх знач. числа

# import random
# a = str(random.randint(100, 999))
# print(a)
# first = int(a[0])
# second = int(a[1])
# third = int(a[2])
# print(first+second+third)

#Основные методы строк:
# m = 'Marina Bagdevich 10'
# print(m.capitalize()) #первая буква становится заглавной, остальные строчные
# print(m.title()) #каждое слово начинается с заглавной, остальные строчные
# print(m.upper())
# print(m.lower())
# print(m.swapcase())
# print(m.isupper()) #вернёт тру, если всё буквы заглавные
# print(m.islower())
# print(m.istitle())
# a = '123421342134'
# print(a.isdigit()) #True если в строке есть число (Если только цифры, но если буквы или символы, то False)
#
# a = 'woergwerjg'
# print(a.isalpha()) #True если в строке только буквы (числа, или символы это False)



#Методы для разрыва строки в список (JOIN) и для объеденения списка в строку (SPLIT)
# sp = ['H', 'e', 'l', 'l', 'o']
# print(''.join(sp)) #join собирает все жлементы списка в одну строку
# b = '1_2_3'
# print(b.split('_')) #из строки делает список, разрывает строку по какому-то символу
# print('1 2 3 4 5'.split(' ')) #сплит по умолчанию использует пробел


#Task 4. Пользователь вводит строку, удалить из неё всё пробелы.
# a = input('Введите текст: ')
# b = a.split(' ')
# c =''.join(b)
# print(c)
# print(c[-1::-1])
# print('абв'[::-1]) #при печати справа-налево, первые два параметра можно пропустить

#f-строка
# name = 'Тимур'
# age = 22
# print(f'Меня зовут {name}. Мне {age} лет.')
# #ДЗ на вторник:

# 1)
# 2) пример: full_str = 'Один два три' snall_str = один (спользовать IN упрощает)
# 3)Можно использовать Count
# 4)
# 5)


































# Урок 4.
#  Python есть два цикла:
# 1)For
# 2)While
# Циклы используются, когда нужно повторить что-то много раз

#Цикл FOR цикл с параметром. В цикле FOR указывается переменная (итератор) и множество значений по которым переменная будет проходить.
#Для повторения цикла заданное число раз (например 4), исползуем функцию range(4)
# for i in range(4):
#     print('Hello!')
#     print(i)

#range(n) формирует диапазон от 0 до n, не включая n
# a = range(10)
# print(a) #тип данных range
# print(*range(10)) #оператор * покажет, что находится внутри какого-либо элемента
#
# print(*range(10))
# print(*range(4,8))
# print(*range(2,20,5))

# for i in 'Я дебил программирование':
#     print(i)



#Вывести числа от 1 до 15 в обратном порядке

# for i in range(15,-1,-1):
#     print(i)



#Есть строка 'Я учу программирование'. Вывести на печать без 'о'

# first_str = 'Я учу программирование'
# second_str = ''
# for i in first_str:
#     if i != 'о':
#         second_str += i
# print(second_str)


#Task 1. Вывести начало, конец и шаг последовательности. ВЫвести на экран последовательность.

# a = int(input('Введите начальное значение: '))
# b = int(input('Введите конечное значение: '))
# c = int(input('Введите шаг: '))
#
# for i in range(a, b, c):
#     print(i)


#Вывести числа в диапозоне кратные 5
#
# a = 54
# b = 9184
# for i in range(a, b+1, 5):
#       print(i)

#Массивы в Python. Модуль array
# Одномерные массивы в Python - списки элементов
# значение в списках указываются внутри квадратных скобках [], и перечисляются через запятую

# #Пустой список
# arr = []
# #Массив строк
# my_array = ['str1', 'str2', 'str3']
# print(len(my_array))
# for i in my_array:
#     print(i)

#Массив в Python - это список из элементов одного и того же типа
# Список в python - коллекция элементов любого типа
# a = ['a', 'b', 'c'] #Массив (array)
# b = ['a', 123, (1,2,3,4,1), [4,2,1,5,7]] #список (list)

# arr = [1,7,9,10]
# for i in arr:
#     if i == 9:
#         print(i)
#         break #завершает досрочно цикл (только 9)
#
# arr = [1,7,9,10]
# for i in arr:
#      if i == 9:
#          break #завершает досрочно цикл (всё до 9)
#      print(i)
#
#
# arr = [1,7,9,10]
# for i in arr:
#     print(i)
#     if i == 9:
#         break #завершает досрочно цикл (с 1 до 9)



# arr = [1,7,9,10]
# for i in arr:
#     if i ==9:
#         continue #продолжает цикл, минуя оставшиеся команды (продолжает без 9)
#     print(i)


#Списки изменяемы, можно добавлять, удалять или меня элементы
#
# a = [1,2,3,4]
# # print(a)
# a.append(7)
# # print(a)
# #
# # print(a.count(3)) #count покажет, сколько символов в списке
# # print(a.index(3)) #index показывает позицию на каком месте стоит символ
# print(a.pop(0)) #Выведет последний элемент (если указать индекс, выведет по индексу)
# a.pop() #БЕЗ print удаляет символ на указанном индексе
# #pop в любом случае удаляет элемент
# a = [1,2,3,4]
# # a.remove(3) #remove удаляет указанное значение, а pop удаляет символ на указанном индексе
# # print(a.remove(3)) #самостоятельный метод, не выводит ничего
#
# a.reverse() #также самостоятельный метод, оборачивает список справа-налево
# print(a)


#Task 3

#
# menu = ['Борщ', 'Расольник', 'Голубцы', 'Том Ям']
# a = 'Голубцы'
# for i in menu:
#     if i !=a:
#         print(i,  '- Я это не ем')
#         continue
#     elif i == a:
#
#         print(i,  '- Я это ем')
# print('Ужин окончен')


#Task 4. найти сумму и произведение чисел в списке
#
# arr = [1,2,3,4,5,6,7]
# summa = 0
# pro = 1
# for number in arr:
#     summa += number
#     pro *=number
# print(f'Сумма:  {summa} Произведение:  {pro}')
#
# # Task 5. Таблица умножения от 1 до 9
#
# for i in range(1,10):
#     for j in range(1,10):
#         print(i*j, end='\t') #end = ' ' чем заканчивается строка в принте
#     print()
#По умолчанию принт заканчивается переносом строки


#ДЗ на пятницу:
#5. оформить таблицу умножения, согласно стилям принта: фон, текст, рамка



































# Урок #5
# Цикл while

# i=5
# while i<10: - условие
#     print(i)
#     i+=1 - тело цикла


# while <условие>:
    #comand_1
    #comand_2

# i = 20
# while i>0:
#     print(i)
#     i-=1

#Один из вариантов выхода из бесконечного цикла - это break

# i = 0
# while i<10:
#     print(i)
#     i-=1
#     if i == -5: break


#Вычислим сумму от 1 до 50
# summa = 0
# i = 1
# while i<=50:
#     summa += i
#     i +=1
# print(summa)

# while True:
#     print('Hello!')
#     break


# t = True
# while t:
#     print('Hello')
#     t = False


#Task_1. Расспечатать квадраты чисел от 1 до 10

# i = 1
# while i<=10:
#     print(i**2)
#     i +=1


#Task_2. Перемножить всё чет числа от 1 до 500
# i = 1
# result = 1
# while i<=50:
#     if i%2==0:
#         result *= i
#     i+=1
# print(result)

# while - когда диапазон чисел неизвестен
# for - когда диапазон известен


#Task_3. Вывести в одну строку на печать числа от 15 до 1
# i = 15
# while i>=1:
#     print(i, end='\t')
#     i-=1


#Task_4. Пользователь вводит диапазон, вывести отрицательные числа в этом диапазоне

# a = int(input('Введите начало диапазона: '))
# b = int(input('введите конец диапазона: '))
# if a>b:
#      # c=a
#      # a=b      #либо вот так a,b = b,a
#      # b=c
# i = a+1
# while i<0 and i<b:
#      print(i)
#      i += 1

#2. Конструкция or-else, while-else
#Циклы for, while могут использовать else в своих конструкциях.
#Если цикл завершился нормально (без вылетов, без break), выполнится блок else


# for i in range(3):
#     print(i)
#     if i==10: break
# else: #else сработал, т.к. не было break
#     print('Готово!')


# try:
#     # a = 1/0
#     print(int('fff'))
# except Exception:


# i = 0
# while i<3:
#     print(i)
#     i+=1
#     print(1/0) #Из-за этого сключения, блок else не сработает
# else: print('Готово')


#Task_5. Калькулятор. Ввод двух вещественных чисел float, Операции +-*/**sqrt

#(
# while True:
#      a = float(input('Первое число: '))
#      while not a.isdigit():
#          print('Неправильное число')
#          a = input('Первое числов: ')
#     a = float(a)
#     znak = str(input('Введите знак (+-/**sqrt): '))
#     if znak == 'E': break
#     elif znak not in '+-*/^√':
#         while znak not in '+-*/^√':
#             print('Вы не ввели знак операции!')
#             znak = str(input())
#     a = float(input('Первое число: '))
#          while not a.isdigit():
#          print('Неправильное число')
#          a = input('Первое числов: ')
#     a = float(a)
#     if znak == 'E' or znak == '': break
#     elif znak == '+': print(a+b)
#     elif znak == '-': print(a-b)
#     elif znak == '/':
#         if b==0: print('На ноль делить нельзя!')
#         else: print(a/b)
#     elif znak == '*': print(a * b)
#     elif znak == '^': print(a ^ b)
#     elif znak == '√': print(a**(1/b))
# ПРАВИЛЬНЫЙ КАЛЬКУЛЯТОР
#  while True:
#     a = input('Первое число: ')
#     while not a.isdigit():
#         print('Неправильное число!')
#         a = input('Первое число: ')
#     a = float(a)
#     znak = str(input('Введите операцию (+-*/^√): '))
#     if znak == 'E': break
#     elif znak not in '+-*/^√':
#         while znak not in '+-*/^√':
#             print('Вы не ввели знак операции')
#             znak = str(input('Введите операцию (+-*/^√): '))
#     b = input('ВТорое число: ')
#     while not b.isdigit():
#         print('Неправильное число!')
#         b = input('Первое число: ')
#     b = float(b)
#     if znak == '+': print(a+b)
#     elif znak == '-': print(a-b)
#     elif znak == '*': print(a*b)
#     elif znak == '/':
#         if b==0: print('На ноль делить нельзя!')
#         else: print(a/b)
#     elif znak == '^': print(a**b)
#     elif znak == '√': print(a**(1/b)) #√ - alt+251
#)


#Task_6.
# chet = 0
# nechet = 0
# arr1 = [1,2,4,5,7,8,9]
# for i in arr1:
#     if i%2==0: chet +=1
#     else: nechet +=1
#
# print(f'Неч - {nechet}, Чётеых - {chet}')
# if  chet>nechet:
#     print(f'Сумма всех чисел: {sum(arr1)}')
# else:
#     print(f'Произведение 1,3 и 6 чисел: {arr1[0]*arr1[2]*arr1[5]}')


#Задание на вторник
#Используя while создать игру в казино, комп генерирует число от 1 до 10 и ещё от 1 до 2(это цвет) У пользователя есть 5 попыток номер  и цвет
#(3 2) если мы не угадали, сказать правильну комбинацию и продолжить игру дальше, если угадали, закончить игру






#
# while True:
#     a = input('Первое число: ')
#     while not a.isdigit():
#         print('Неправильное число!')
#         a = input('Первое число: ')
#     a = float(a)
#     znak = str(input('Введите операцию (+-*/^√): '))
#     if znak == 'E': break
#     elif znak not in '+-*/^√':
#         while znak not in '+-*/^√':
#             print('Вы не ввели знак операции')
#             znak = str(input('Введите операцию (+-*/^√): '))
#     b = input('ВТорое число: ')
#     while not b.isdigit():
#         print('Неправильное число!')
#         b = input('Первое число: ')
#     b = float(b)
#     if znak == '+': print(a+b)
#     elif znak == '-': print(a-b)
#     elif znak == '*': print(a*b)
#     elif znak == '/':
#         if b==0: print('На ноль делить нельзя!')
#         else: print(a/b)
#     elif znak == '^': print(a**b)
#     elif znak == '√': print(a**(1/b)) #√ - alt+251




































# Урок №6

# Списки
# Коллекция - программный объект (переменная контейнер), хранит набор одного или разных типов
# Такие типы данных как int, float, bool, comlex и т.д. не являются коллекциями


#В коллекциях можно оброщаться по их элементам
#У всех коллекций есть функии и методы, в зависимости от типа коллекции
#      Стандартные коллекции:   строка (str), список(list), кортеж (tuple), множество (set, frozenset), словарь (dict)
# 1)Списки: изменяемы, индексация, нет уникальности, создаются либо через [], либо команда 'list'
# 2)Кортеж: неизменяемы, индексация в них есть, нет уникальности, создаются либо через (), либо команда 'tuple'
# 3)Строка: неизменяемы, индексация есть, нет уникальности, создаются '', "", '''''', команда 'str'
# 4)Множества: изменяемо, нет индексации, уникальность имеется, создаются с помощью {}, либо команда 'set' или 'frozenset'
# 5)Словарь: ключи неизменяемые, значения изменяемые, нет индексации (есть ключи (тоже самое, только ключ создаётся сам)), ключи уникальны(значения нет), создаются с помощью {}, либо команда 'dict'

#Списки - упорядоченные изменяемые коллекции объектов любого типа.
#Создание списков:
#1) my_list = [] - с помощью квадратных скобок
# elements = [1,2,3,'a',4,5,'b']
# print(elements)
# pop = [] #пустой список

#2) через функцию list
# elements = list()
# elements1 = list('asdvsad') #символы строки станут списком
# elements2 = list(range(10)) #диапазон станет списком
# elements3 = list((1,2,3)) #котреж превратится в список
# print(elements1, elements2, elements3)


#Генерация списка

#Создать список из 10 случайных чисел от (от 1 до 100)
#Через обычный цикл:
# import random
# a = []
# for i in range(10):
#     a.append(random.randint(1,100))
# print(a)

#Через генерацию:
# import random
# a = [random.randint(1,100) for i in range(10)] #В одну строку создали список из 10 случайных чисел
# #Циклы с постусловием - удачный вариант, если в теле цикла только одна простая корманда
# print(a)
# import random
# a = [random.randint(1,100) for i in range(10)]
#Добавление элементов в список
# a.append('a') #Добавили элемент в конец списка
# a.insert(2,10000) #insert вставит число 10000 на позицию 2. Элемент на 2 позиции сдвинется вправо



#Изменение элементов списка
# import random
# a = [random.randint(1,100) for i in range(10)]
# a[1] = 666 #Обратились к элементу по его индексу и присвоили ему новое значение

#Удаление элементов из списка
# del a[1] #del - команда для удаления элементов.
# a.remove(666) #remove удаляет элемент с указанным значением
#если элемента в списке нет, remove выдаст ошибку
# print(a.pop(5)) #pop аналагично команде del, но pop является методом. (можно расспечатать)
# del a[1:4] #del удаляет диапазон элементов
# print(a)

#Проверка наличия элемента в списке (in либо index)
# print([10 in a) #in выводит  True/False если элемент есть/или его нет
# a = [1,2,3,4,'a','b','c']
# print(a.index('b')) #Index выведет позицию искомого элемента, либо выдаст ошибку, если его нет


#Объеденение списков (+ либо extend)
# x = [1,2,3,'a','b']
# y = [4,5,6,'c','d']
# print(x+y) #получим один список из двух списков x И y
#
# x.extend(y) #extend расширяет первый список за счёт второго
# print(x)


#Копирование списков (либо 'copy', либо передать значение через 'list', либо много других вариантов, но не a = b )
# my_list_1 = [1,2,3,4]
# my_list_2 = my_list_1
#То есть = копирует не значение, а место в памяти
#Поэтому любые изменения с одной переменной отрозятся на второй
# my_list_1.append(10)
# my_list_2.append(20)
# print(my_list_1)
# print(my_list_2)
# print(id(my_list_1), id(my_list_2))

# b = my_list_1.copy() #Передал значение методом copy из списка my_list_1 в b
# my_list_1.append(10)
# print(my_list_1, b)
# print(id(my_list_1), id(b))


# a = ['кот', "слон", "змея"]
# b = a
# a[1] = 'тигр'
# print(a, b)

# a = [2]
# b = 2
# print(id(a), id(b))

# a = ['кот', "слон", "змея"]
# b = list(a)
# a[1] = 'тигр'
# print(a, b)


#Цикл по списку
#Через for

# elements = [1,2,3,'мяу']
# for i in elements:
#     print(i)

#Через while
# i = 0
# len_elements = len(elements)
# while i<len_elements:
#     print(elements[i])
#     i+=1


#Для перебора списка цикл for работает более компактно


# a = [1,2,3,4,5]
#Удалим числа меньше 3
#Цикл for
# for i in a:
#     if i<3:
#         a.remove(i)

#Цикл while
# i = 0
# while i<len(a):
#     if a[i]<3:
#         del a[i]
#     else:
#         i+=1
# print(a)




#Методы списков
# txt = [1,2,3,4,5,500,5,6,7,8,9]
# while a.count(5):  #!=0      #Count считает кол-во указанных значений в списке
#     txt.remove(5) #remove удаляет указанное значение (но только один раз)
# print(a)

# a.clear() #clear полностью очищает список
# a.reverse() #reverse меняет порядок элементов на обратный
# a.sort(reverse=True) #sort - метод для сортировки по возрастанию (либо включить reverse, будет от большего к меньшему)
# print(a)


# list_1 = ['abc', 'abcdef', 'ferlkergkwerg', 'w']
# # list_1.sort()  #строки сортируются по лафавиту
# list_1.sort(key=len)
# print(list_1)


#Вложенные списки
# elements = [1,2,3,4,[5,6,7,8], 'abc', 4]
#[5,6,7,8] - вложенный список
# print(elements[3][2]) #выводим на печать элемент из вложенного списка



# store = [['apple',10], ['orange',7],['pineapple',12]]
# # print(store[0]) #первая полка магазина
# #Выведем все секции магазина
# for i in store:
#     print(i)


#В списке заменить число 20 на 200
# a = [1,2,3,4,78,19,20,173,20]
# for i in a:
#     if i == 20:
#         ind = a.index(i)
#         a[ind] = 200
# print(a)



#DZ
# Подготовиться к экзамену, повторить темы:
# 1) Введение
# 2) Условные операторы
# 3) Строки
# 4) Циклы
# 5) Списки





































#Урон №7 и Урок №8 КОРТЕЖИ И СЛОВАРИ

#Tuple - кортеж. Чтобы создать кортеж, должна быть запятая

# a = tuple() #пустой кортеж
# print(type(a))


#Преймущество над списками:

#1) Меньший вес
# a = (1,2,3,4,5,6,7)
# b = [1,2,3,4,5,6,7]
# print(a.__sizeof__())
# print(b.__sizeof__())  #список тратит больше ресурсов, потому что  в списке гораздо больше функций



# 2)Защита от изменений
# Если всё-таки нужно изменить кортеж, то можно изменить тип данных list
# Либо перезаписать переменную на другой кортеж




#Срезы по картежам
# a = (1,2,3,4,5,6,7)
# b = [1,2,3,4,5,6,7]
# # print(a[0:6:2])
# # a[1] = 3 # изменять элементы кортежа нельзя
#
# my_tuple = (10.23, 10, 'sss', 888)
# my_tuple = list(my_tuple) #1)вариант как изменить кортеж
# my_tuple.append(1000)
# my_tuple = tuple(my_tuple)
# print(my_tuple)

# c = list(my_tuple) #2) Вариант как изменить кортеж
# c.append(1000)
# print(tuple(c))



#Кортежи с вложенными списками
# n = (1, 'do', ['p', 10, 20])
# Можно ли изменять список, вложенный в кортеж
# n[2][0] = 'b' #Элементы вложенного списка изменить можно, а сам вложенный список изменить нельзя
# print(tuple(n))


# x = (1,2,3,4,5)
# y = (6,7,8,9)
# z = x+y #оператор + объеденяет несколько кортежей в один
# print(z)
# print(x*2) #оператор * создаст один кортеж из дублей начального кортежа
# c = [10,11,12]
# print(x+c) #можно объиденять одинаковые типы данных



# a = 1,2,3,4,5 #скобки можно вообще не использовать, так как любое перечисление элементов по умолчанию кортеж
# print(a)


# print((1,2,3,4) * 2) #!но при проведении операций с кортежами лучше скобки оставить


#Методы и функции для кортежа
# a = (1,2,3,4,5,6,7,8)
# print(a.index(5)) #позиция искомого элемента
# print(a.count(5)) #кол-во искомого элемента
# print(len(a)) #кол-во элементов в кортеже
# print(max(a), min(a))

#Task №1. создать кортеж из 10 случайных чисел и найти минимум и максимум

# import random
# b = tuple(random.randint(1,1000) for i in range(10))
# print(type(b)) #если генератор не преоброзавать в какой-то тип данных, то тип будет генератор
# print(b)
# print(f'Максимальный: {max(b)}, Минимальный: {min(b)}')


#Task 2. Два картежа:
# один заполнить 10 случайными числами от 0 до 5
# второй  заполнить 10 случайными числами от -5 до 0
# Объеденить кортежи и посчитать сколько получилось 0


#(Сам сделал, но если забуду = дебил)



#Расспечатать все элементы кортежа z без скобок через запятую


#import random
# a = tuple(random.randint(0,5) for i in range(1000000))
# b = tuple(random.randint(-5,0) for j in range(1000000))
# z = a + b
#
# for j in z: print(j, end=', ') #1 вариант



# z =  ('one', 'two', 'three')
# print(', '.join(z)) #join работает только со строками!


# a = tuple(random.randint(0,5) for i in range(1000000))
# b = tuple(random.randint(-5,0) for j in range(1000000))
# z = a + b
# c = 0  #третий способ
# while c<len(z):
#     if c==len(z)-1: print(z[c])
#     else: print(z[c], end=', ')
#     c += 1


# print(*z,sep=', ')  #четвёртый способ


#Task 3. Создайте кортеж с цифрами от 0 до 9 и посчитайте сумму
# import random
# a = tuple(random.randint(0,9) for i in range(10))
# print(sum(a))


#Task 4.
# long_word = ('t', 't', 'q', 'w', 't', 'q', 'w', 'w', 'q', 'w')
# my_list = []
# for i in long_word:
#     if i not in  my_list:
#         my_list.append(i)
#
# for j in my_list:
#     print(f'Частота буквы {j}: {long_word.count(j)}')





#СЛОВАРИ (dict) - это тип данных из коллекции, является ассоциативным масивом (или хешем)
# Словари отображают пары ключи: значение

# Способы создания словаря:


# 1) С помощью литерала
# d = {} #пустой словарь
# d = {'dict':1, 'dictionary':2, 1:'one', 2:'two', 'first':'первый', 'second':'второй', 2000:10}
# print(len(d)) #этот словарь состоит из 7-ми пар элементов
# print(d)
# print(d[2]) #two
# print(d['first']) #первый

# 2) С помощью (dict)
# d = dict(short='dict', long='dictionary')
# d = dict([(1,'one'), (2,3)])


# 3) С помощью dict.fromkeys
# d = dict.fromkeys(['a','b'],1000) #fromkeys для всех ключей присваивает одно и тоже значение
# print(d)


# 4) С помощью генератора словаря
# d = {a:a**2 for a in range(10)}


# d = {2:'eee', 2:'ffl'} #(ОШИБКА) ключи должжны быть уникальным
# print(d)



# #Изменение значений в словаре:
# d = {1:2, 2:4, 3:9}
# # d[3] = 30
# d[4] = 16
# print(d)


#Методы словаря:
# d = {1:2, 2:4, 3:9}
# d.clear() #очистить словарь
# c = d.copy() #получить копию словаря
# print(d.keys()) #возвращает все ключи словаря
# print(d.values()) #возвращает все значения
# print(d.items()) #возвращает все пары словаря
# print(d.pop(10, 'нет такого')) #удаляет элемент с заданным ключом (и ключ, и значение)  ((если такого элемента (ключа) нет, то вернёт второй аргумент
# print(len(d)) #вернёт кол-во пар в словаре
# print(d)





#Удаление элементов словаря
# d = {1:2, 2:4, 3:9}
# del d[2] #del удаляет пару по указанному ключу
# print(d)

#Task 1. есть словарь зарплат

# b = {'Секретарь':1000, 'Директор':2000, 'Лох':100, 'Рома':120}
# del b['Секретарь']
# b.pop('Лох')
# print(b)



#Словарь с множеством значений:
# Positions = {
#     'Manager':['Director', 'Deputy Manager'],
#     'Teacher':['Specialist', 'Metodist', 'Lecturer'],
#     'Staff':['Cleaner','Porter','Watchman']
# }
# print(*Positions.keys()) #все ключи
# print(*Positions['Manager']) #все вакансии на должность менеджера
# print(*Positions['Staff'][1]) #Porter



# Positions = {
#     'Manager':['Director', 'Deputy Manager'],
#     'Teacher':['Specialist', 'Metodist', 'Lecturer'],
#     'Staff':['Cleaner','Porter','Watchman']
# }
#
# # print('Staff' in Positions) #оператор ин вернёт True, если такой КЛЮЧ есть в словар
# if 'Staff' in Positions:
#     del Positions['Staff']
# print(Positions)


#Встроенная функция zip
# d = dict(zip([1,2,3],['one','two','three']))
# # ZIP создаёт пары из списка ключей и списка значений
# # DICT превращает эти пары с ловарь
# print(d)
# for key in d:
#     print(key,':',d[key]) (для красивого словаря)
# for key, value in d.items():
#     print(key, value)   (для красивого словаря)

#Сортировка словаря
#1. Получаем ключи
# my_dictionary = {'Andrey':20, 'Misha':25, 'Dasha':30, 'Veronika':28}
# my_keys = my_dictionary.keys()
#
# #2. Конвертируем ключи в список
# my_keys = list(my_keys)
#
# #3. Сортировка ключей
# my_keys.sort()
#
#
# #4.
# new_dictionary = {}
# for kluch in my_keys:
#     new_dictionary[kluch] = my_dictionary[kluch]
#     print(kluch, ':', new_dictionary[kluch])
# print(new_dictionary)


#Сортировка
# a = ('abc', 'ghk', 'whrteh', 'wqerqwer')
# b = list(a)
# b.sort()
# b = tuple(b)
# print(b)

# Task 1. создать словарь участников конфернеции: name, age, city
# по словарю вывести на печать имя и возраст каждого участника

# persons = {'name':['Veronika','Evgenii','Alexander','Elena','Timur'],
#            'age':(28, 29, 48, 39, 49),
#            'location':['Lida','Krichev','Minsk','Minsk','Lida']}
# nomer_person = 0
# #name: Veronika, age:28, Location: Lida
# while nomer_person<len(persons['name']):
#     for key, value in persons.items():
#         print(key, ':' ,value[nomer_person])
#     nomer_person += 1

# Создадим словарь заводов BMW и Tesla.

# zavods = {'BMW':['X3','X5','X7'],     #!1 ВАРИНТ РЕШЕНИЯ
#            'Tesla':['Model_X','Model_3','Model_y']}
# zavods = dict(BMW = ['X3', 'X5', 'X7'],    #!2 ВАРИНТ РЕШЕНИЯ
#               Tesla = ['X', '3', 'Y'])
# zavods = dict(zip(['BMW','Tesla'],    #!3 ВАРИНТ РЕШЕНИЯ
#                   [['X3','X5','X7'],
#                    ['X','3','Y']]))

# for key, value in zavods.items():
#     print(key, ':', value[0],',', value[-1])



# Task_3. Есть словарь с числовыми значениями. Нужно их перемножить и суммировать

# chisla = {'first':2, 'second':12, 'thirt':2, 'fpr':2}
# print('Сумма:',sum(chisla.values()))
# print('Произведение', math.prod((chisla.values())))




# Task_4.  Есть два списка одиноковой длины. Из них сделать словарь
# где элементы списка это ключи, а второго - значения.

# name = ['Roma', 'Timur', 'Alexander']
# age = ['22', '19', '25']
# slovar_1 = dict(zip(name, age))
# print(slovar_1)


# Task_5. Есть фраза "Я изучаю пайтон".
# Создать по этой строке словарь. Ключами будут элементы строки, а значения - частота элемента.
# my_str = "Я изучаю пайтон. Я изучаю пайтон. Я изучаю пайтон."
# my_str = my_str.lower()
# new_dictionary = {}
# for i in my_str:
#     if i in new_dictionary or i.isalpha() is False: continue
#     new_dictionary[i] = my_str.count(i) #если такого ключа нет, то он появится
# print(new_dictionary)


# !2 ВАРИНТА РЕШЕНИЯ
# my_str = "Я изучаю пайтон. Я изучаю пайтон. Я изучаю пайтон."
# dictionary = {i:my_str.lower().count(i) for i in my_str.lower() if i.isalpha()}
# print(dictionary)






































# Урок №8 МНОЖЕСТВА
# Множества = тип данных коллекции, элементы которого не упорядочены. Нет индексации и  ключей.
# Можно добавлять и удалять элементы.
# Особенности:
# 1. Не содержит дубликаты
# 2. Элементы нельзя изменять. Множество является изменяемым, а элементы нет
# 3. Нет срезов, нет индексации и т.д.


# Создание множеств(set):
# 1. С помощью скобок {}
# num_set = {1,2,3,4,5} #т.к. нет ":", то это МНОЖЕСТВО
# print(type(num_set)) #тип данных set
# 2. Командой set()
# my_set = set('adwerwerwqr') #Все дубликаты будут удалены
# print(my_set) #строки каждый раз выводятся в хаотичном порядке

# s = {7,4,3,5,8,4,3,5}
# print(s)

# print({1,2,3,5, 'd','q','r'}) # если в множестве есть числа и строки, то все будет хаотично, но всё идёт по порядку


# Элементы словаря нельзя использовать списки, словари и т.д., так как они поддерживают изменение
# mixed_set = {2.0, 'Nick', (1,2,3,'rqerqwr')} # элементы будут идти хаотично, но элементы кортежа сохранят порядок
# print(mixed_set)

# a = set([1,2,3,4,5,6,7])
# a = set((1,123,3,4,5))
# a = set({1:2, 3:4, 5:6})
# print(a)

# Создание пустого множества
# x = {} #пустые {} скобки по умолчанию считаются словарём

# x = set() #пустые множества создаются через команду set
# print(type(x))



# Доступ к элементам множества
# months = {'Январь','Февраль','Март','Апрель'}
# for m in months: #цикл будет обходить множество в том порядке, в каком оно его получило
#     print(m)

# months = {'Январь','Февраль','Март','Апрель'}
# print('Май' in months)
# print('Март' in months) #оператор in проверит наличие элемента в множестве


# Добавление элементов в множество
# months = {'Январь','Февраль','Март','Апрель'}
# months.add('Май')
# print(months)


# Удаление элементов
# months = {'Январь','Февраль','Март','Апрель'}
# months.remove('Март') #при удалении несуществующего элемента вызывает ошибку
# months.discard('Март') #при удалении несуществующего элемента ничего не произойдёт
# months.pop() #удалятся случайный элемент
# months.clear() #удаляет все элементы во множестве
# print(months)


#операции со множествами
#1)Объеденение (union)


# part_1 = {'Январь','Февраль','Март','Апрель','Май','Июнь'}
# part_2 = {'Июль','Август','Сентябрь','Октябрь','Ноябрь','Декабрь'}
# part_3 = {1,2,3,4}
# print(part_1.union(part_2, part_3)) #uniob объединяет несколько множеств в одно
# print(part_1|part_2) #символ | это аналог !UNION!

# x = {1,2,3}
# y = {4,3,6}
# z = {7,4,9}
# output = x.union(y,z) #в множестве будут все числа без дубликатов
# print(output)
# print(z|x|y) #  вертикальная черта ( | ) это объеденение (union)


#Пересечение множеств (intersection)
# x = {1,2,3}
# y = {4,3,1}
# z = {3,4,9}
# print(x.intersection(y, z)) #intersection создаёт множество из тех элементов, которые есть в данных множествах
# print(x&y) # & - это аналог пересечения 9intersection)
# print(x&y&z)



#Разница между множествами
# A = {1,2,3}
# B = {4,3,6}
# A-B
# print(A-B) #получим элементы которые есть в "A", но нет в "B"(1 и 2)
# B-A
# print(B-A) #получим элементы которые есть в "B", но нет в "A"(4 и 6)
#Либо функция difference
# print(B.difference(A)) #difference аналогичен разница ( - )

# x = {1,2,3}
# y = {4,3,1}
# z = {3,4,9}

#Методы множеств
# a = part_1.copy() # copy нужен для копирования значения, но не ячейки памяти

# print(x.isdisjoint(y)) # если содержит одинаковые элементы, вернёт "FALSE" (либо TRUE, если нет одинаковых)

# print(len(x)) # LEN показывает кол-во элементов множества без дубликатов


#Множество frozenset - неизменяемое множество

# my_set = {1,2,3,4,5,6}
# my_set = frozenset(my_set) # обычное множество сделал frozenset
# Теперь методы для изменения my_set недоступны

# Task_1. Узнать, есть ли в списке из 10 случайных чисел дубликаты
# import random
# b = [random.randint(1,10) for i in range(10)]
# print(b)
# # a = set(b)
# # if len(b) == len(a): print('Дубликатов нет!')
# # else: print('Дубликаты есть')
#
# print(len(b)!=len(set(b))) #более короткий вариант

#Task_1.
# # 1. Создать словарь
# slovar = {}
# # 2. добавить элемент str:int
# slovar['Крип'] = 29909
# # 3. Добавить элемент tuple:list
# slovar[(1,2,3,4,5,6)] = ['a','b','c']
# print(slovar)
# # 4. Получим элемент по ключу
# k = 'Крип'
# v = slovar[k]
# print(k,':',v)
# # 5. Удалить элемент по ключу
# slovar.pop(k)
# print(slovar)
# # 6. Получим список ключей словаря
# print(list(slovar.keys()))



# Task_2

# a = {'a','b','c'}
# b = frozenset(a)
# print(a|b) # объеденение
# print(a&b) # пересечение































# Урок №9.  МАТРИЦЫ И TRY-EXCEPT

# Матрица- прямоугольная таблица каких-то элементов одного типа - чисола, строки и т.д.
# В качестве матрицы используются вложенные скиски

# [
# [1,2,3]
# [4,5,6]
# [7,8,9]
# ] - пример матрицы 3 на 3 (матрица состоит из 3 строк и 3 столбцов)
# Если у матрицы кол-во стров и столбцов совпадают, то она называется квадратной
# В остальных случаях она прямоугольная

# A = [[1,2,3],[-5,8,9]]
# print(A) #получили матрица из 2 строк и 3 столбцов


# Другие способы создания матрицы:
# R = 3 # задаём кол-во строк
# C = 2 # задаём кол-во столбцов
# A = []
# for i in range(R): # цикл будет работать столько раз, сколько есть строк, то есть 3
#     A.append(['a']*C) # на каждую строук матрица добавили вложенный список из двух элементов
# print(A) # получили матрица 3х2 (3 строки и 2 стобца)


# С помощью генератора
# N = 3 # строки
# M = 4 # стобцы
# A = [[0]*M for i in range(N)]
# print(A) # получили матрица 3 на 4



# Работа со строками и столбаци матрицы
# A = [
#     [1,4,8,9],
#     [2,8,9,4],
#     [3,9,0,1]
# ]
# Создал матрицу 3 на 4
# print(A) # вывод матрицы
# print(A[1]) #вывод второй строки
# print(A[1][2]) #третий элемент второй строки
#вывод третьей колонки
# for i in A:
    # print(i[2]) # выводит 3 символ каждой строки матрицы


# вывести матрицу в табличном ввиде
# A = [
#     [1,4,8,9],
#     [2,8,9,4],
#     [3,9,0,1]
# ]
# Для обработки матрицы используют двойной цикл (цикл внутри цикла)
# Первый цикл обходит строки матрицы, второй цикл обходит столбцы
# выведем матрицу на печать так, чтобы числа разделялись пробелами
# for row in range(len(A)): #обход по кол-ву строк. Len(A) кол-во строк
#     for column in range(len(A[row])): # A[row] - конкретная строка целиком (кол-во стобцов), длина строки целиком
        # print(A[row][column], end=' ')
#         параметр end= говорит о том, чем должен заканчиваться каждый принт
#     print() # после печати очередной строки, сработает ппустой принт, чтобы сделать перенос



# Заполнение матрицы
# import random
# N = 3 # строки
# M = 2 # столбцы
# A = [[0]*M for i in range(N)]
# for i in range(N): # обход по строкам
#     for j in range(M):
#         A[i][j] = random.randint(1, 10)
# print(A)
# Чтобы заполнять матрицу конкретными числами, сначала создают нулевую матрицу(матрицу из нулей)
# Иначе нельзя будет обратиться к номеру строки и столбца чтобы внести туда значения


# Заполним матрицу и сразу же выведем на печать через цикл
# import random
# N = 3 # строки
# M = 2 # столбцы
# A = [[0]*M for i in range(N)]
# for i in range(N): # обход по строкам
#     for j in range(M):
#         A[i][j] = random.randint(1, 10)
#         print(A[i][j], end='\t')
#     print()


# Task_1. Размер матрицы ввести с клавиатуры. Создать матрицу и заполнить случайными числами
# import random
# A = int(input('Введите кол-во строк: '))
# B = int(input('Введите кол-во столбцов: '))
# C = [['V']*B for i in range(A)]
# for i in range(A):
#     for j in range(B):
#         C[i][j] = random.randint(1,100)
#         print(C[i][j], end='\t')
#     print()



# Исключения (exceptions)

# если выполнить код - print(4+'A'), то в консоли получим ошибку(исключение)
# print(4 + 'a') # Исключения нужно,чтобы сообщить, что произошла ошибка

# КРАТКОЕ ОПИСАНИЕ ИСКЛЮЧЕНИЯ
# Traceback (most recent call last): - интерпретатор перехватил ошибку и выводит по ней информацию
# File "", line 1865 - ошибка в таком-то файле и такой строке (для ориентира)
# print(4 + 'a')  - выражение в котором произошла ошибка
# TypeError: - название исключения
# unsupported operand type(s) for +: 'int' and 'str' - пояснение ошибки

# Виды исключений:
# BaseException - базовое исключение, от него берут начало все остальные
#     SystemExit - исключения из-за выхода из программы
#     KeyboardInterrupt - программа прервана пользователем
#     Exception - все остальные ошибки(исключения)
#         StopIteration - пораждается функцией next, командой continue (если в итераторе больше нет элементов)
#         ArithmeticError - арифметическая ошибка (деление на ноль, переполнение памяти и т.д.)
#              FloatingPointError - ошибка при работе с дробными числами
#              OverflowError - результат вычисления слишком большой, возникает с дробными и комплексными числами
#              ZeroDivisionError - деление на ноль
#         ValueError
#         TypeError
#         KeyError
#         SyntaxError


# try-except - конструкция для перехвата исключений (чтобы програма не вылетала из-за исключения)
# try:
#     k = 1/1
# except ZeroDivisionError:
#     k = 0
# print(k)
# в блоке try пишем команды, которые ВОЗМОЖНО приведут к ошибке
# в блоке except указываем название ошибки, которую except будет пытаться перехватить
# внутри блока except указываем команды, которые нужно выполнить в случае перехвата

# Если ошибки не было, то except не сработает
# Или если ошибка было, но не та, которую ждал except


# try:
#     k = int(input('Введите делитель: '))
#     print(1/k)
# except ValueError:
#     print('Вы вводите не число!')
# except ZeroDivisionError:
#     print('Деление на ноль!')



# try:
#     k = 1/0
# except:
#     print('Базовая ошибка!')
# Можно использовать более обширные варианты исключений, но тогда не поймём какая именно ошибка
# В блоке exception можно ничего не указывать, тогда будет перехватывать все исключения



# try:
#     while True:
#         a = input('Введите число')
#         if a == 'n': break
# except:
#     aВ = input('ведите число')
#     if a == 'n': break
# СЛОМАЕТСЯ программа


#try-except-finally
# a = {'a':1, 'b':2, 'c':3}
# try:
#     # val = a['d'] #обращаемся к несуществующему ключу
#     print('a'+1)
# except KeyError:
#     print('Произошла ошибка ключа!')
# finally:
#     print('Выполнен оператор finally')
#
# print('fffkljflj')

#блок finally сработает в любом случае - была ошибка или нет. Даже если программа вылетела

#использование else в try-except
# try:
#     val = a['c']
# except KeyError:
#     print('Ошибка ключа')
# else: #блок else сработает только тогда, когда не было ошибок и не было перехвата ошибок
#     print('Ошибок не было')
# finally:
#     print('Выполнен finally')


#ДЗ на вторник:
#1.
# 1.Матрица 5 х 5. Найти строку с максимальной суммой элементов и вывести её НОМЕР (индекс)
# 2. Найти максимальный элемент главной диагонали матрицы.
# 3. Вычислить количество отрицательных элементов ПОД главной диагональю матрицы row>col
# 4. Найти сумму каждой строки

#2.
# Ввод с клавиатуры. Если строка введённая с клавиатуры – это числа, то поделить первое на второе.
# Обработать ошибку деления на ноль.
# Если второе число 0, то программа запрашивает ввод чисел заново.
# Также если были введены буквы, то обработать исключение.
#  Придумать и обработать исключения на TypeError и ValueError, IndexError, SyntaxError,
#По желанию:
# IndentationError (ошибка отступа),
# ModuleNotFoundError (ошибка импорта),
# NameError (ошибка имени переменной)





































# Урок №10 ФАЙЛЫ
# Файлы - это набор данных в виде последовательности битов на компьютере
# Информация в этих файлах хранится в куче (структура данных)
# каждый файл имеет название "file_name"
# pythone работает с двумя типами данных:
# 1) текстовые
# 2) Бинарные

# Текстовые файлы - файлы с каким-то содержимым. Состоят из последовательности символов которые понимает человек.
# Для того, чтобы python мог обработать текстовый файл, он может хранится в двух форматах:
# .txt - текст
# .rtf - формат обогащённого текста


# Бинарные файлы - отображаются в закадированной форме. (с использованием 0 и 1)
# 0 или 1 - это бит
#  НО! НАБОР из восьми 0 и 1 - это байт
# в текстовом файле 'тексттексттекст' - 15 байт (или 1 байт и 7 бит)
# Бинарные файлы хранятся с расширением .bin




# Операции с файлами
# Открыть
# Закрыть
# Выполнить операции (чтение, записать, редактирование, удаление)



# Открытие файла
# Команда (функция) 'Open()' - открывает любой файл на компьютере
# При отрытии файла, пайтон создаёт на его основе объект

# f = open('low.txt', 'r')
# 'example.txt' - название открываемого файла
# 'r' - режим открытия файла    (в данном случае для чтения) ('r' - 'read')
# Переменная f в данном случае - это переменная указатель
# указывает на объект 'example.txt'


# Режимы открытия файла
# r - только для чтения
# w - только для записи. Если файла  с указанным именет нет, то он будет создан
# rb - только для чтения (бинарный файл)
# wb - только для записи (бинарный файл)
# r+ - для чтения и записи
# rb+ - для чтения и записи (бин файл)
# w+ - для чтения и записи. Создаст файл если его нет
# wb+ - для чтения и записи (бин файл)
# a - для добавления текста в конец файла. Создаст файл если его нет.
# a+ - аналогично, только создаст файл для чтения и записи
# ab - для добавления текста в конец файла. Создаст файл если его нет. (бин)
# ab+аналогично, только создаст файл для чтения и записи (бин)



# f = open('low.txt', 'r')
# c = open('C:/Users/timur/Documents/textov.txt') # открыли файл из любого каталога


# Вывод на печать информации из файла
# c = open('C:/Users/timur/Documents/textov.txt')
# f = open('low.txt', 'r')
# print(*f)

# если файл на русском языке

# f = open('low.txt')
# print(*f) # по умолчанию файлы открываются в кодировке cp1252
# Чтобы читать файлы с кирилическими символами, нужно их открывать
# В кодировке 'utf-8'

# f = open('low.txt', encoding='utf-8')
# print(*f)

# Закрытие файла
# При работе с файлами обязательно нужно их закрыть в коцне
# 1) СПОСОБ
# f = open('low.txt', encoding='utf-8')
# print(*f)
# f.close()
# После закрытия с файлом нельзя проводить операции


# 2) СПОСОБ - try-fynally
# f = open('low.txt', encoding='utf-8')
# try:
#     print(*f) # работа с файлами
# finally:
#     f.close() # файл закроется, даже если в коде будет ошибка


# 3) СПОСОБ - with open as
# with open('low.txt', encoding='utf-8') as f:
#     print(*f)
# в такой конструкции файл закроется сам, когда конструкция завершится
# print(*f) #выдаёт ошибку, так как файл закры с помощью (WITH OPEN)



# Чтение файла
# В пайтоне можно читать определённый объём информации из файла
# с помощью режима read, readline и т.д.


# Функция read
# file.read(size)
# file - переменная  указатель
# read - режим для чтения
# size - сколько символов прочитать



# with open('low.txt', 'r', encoding='utf-8') as f:
#     print(f.read(7)) # печать первых 7 символов
#     print(f.read(7)) # печать последующих 7 символов
# Метод read после чтения символов оставляет курсор в том месте, где он закончил чтение
# При повторном вызове read читает символы с того места где был остановился курсор

# Для чтения нескольких строк в файле используем метод readline или readlines

# with open('low.txt', encoding='utf8') as x:
#     print(x.readline(5)) # readline печатает одну строку целиком (или определённое кол-во символов )
#     print(x.readline())
#Чтение файла
#В пайтоне можно читать определенный объем информации из файла
# с помощью режимов read, readline и тд.



#Функция read
# file.read(size)
# file - это переменная-указатель
#read - режим для чтения
# size - сколько символов прочитать



# with open('example.txt','r', encoding='utf-8') as f:
#     print(f.read(7)) #печать первых 7 символов
#     print(f.read(7)) #будут распечатаны следующие 7 символов
#Метод read после чтения символов оставляет курсор в том месте, где он закончил чтение
#При повторном вызове read читает символы с того места, где был курсор



#Для чтения нескольких строк в файле используем метод readline или readlines


# with open('example.txt', encoding='utf8') as x:
#     print(x.readline(5)) #readline печатает одну строку целиком (или определнное количество символов)
#     print(x.readline())

# with open('example.txt', encoding='utf8') as x:
#     # print(x.readlines())
#     # #readlines выводит все строки файла в виде списка
#     print(x.readlines(10))
#     #в readlines можно указать числовой аргумент hint
#     #в hint указываем количество символов
#     #readlines выведет столько строк, которых достаточно
#     #чтобы охватить все указанные символы

#Запись информации в файл


#Метод для записи - write()
# write записывает указанную информацию в файл,
# который открыт для записи
#Синтаксис записи: f.write(string)
# with open('example.txt', 'w', encoding='utf8') as x:
#     # x.write('Text') #write перезаписывает файл и удаляет всё, что там было
#     x.write('Привет!') #русский текст запишется в той кодировке, которая указана в open

# with open('abc.txt', 'w') as f: #если такого файла нет, он будет создан в проекте
#     f.write('one two three')

#Переименование файлов в Python


#Функция rename()
#Эта функция лежит в модуле os, то его нужно импортировать
import os
#Синтаксис: os.rename(old, new)
# os.rename('abc.txt','newname.txt') #переименовали abc в newname

#Вывод текущей директории
# print(os.getcwd()) #выводит текущую директорию


#Создание нового каталога/папки
# try:
#     os.mkdir('new_folder')
# except FileExistsError:
#     print('Папка уже существует')


#Перейдем в эту папку
# os.chdir('new_folder') #меняет рабочую директорию
# print(os.getcwd()) #увидим новый путь
# #Внутри этой папки создадим файлы и другие папки:
# with open('file.txt', 'w') as t:
#     pass #pass ничего не делает
#
# os.mkdir('folderfolder')

#Вернуться в предыдущую директорию
#1 вариант
# os.chdir('C:/Users/37533/PycharmProjects/208_group')
#2 вариант
# os.chdir('..') #вернуться в предыдущую директорию
# print(os.getcwd())
#Создадим несколько вложенных папок folder1>folder2>folder3
# os.makedirs('folder1/folder2/folder3') #рекурсивно создал 3 вложенные папки
# os.remove('newname.txt') #remove удаляет текстовые файлы
# os.rmdir('new_folder/folderfolder') #удали папку folderfolder
# os.removedirs('folder1/folder2/folder3')
# os.removedirs('new_folder/folder1/folder2/folder3')
# os.remove('new_folder/file.txt')
# os.rmdir('new_folder')

#rmdir и removedirs удаляет только пустые папки

#Task_1. В файле, в одну строку записаны слова и числа через пробел или _
# найти сумму всех чисел.
# #1. Открыть файл и присвоить его переменной-указателю
# f = open('example.txt', 'r', encoding='utf8')
# #2. Текст из файла записать в какую-то переменную
# a = f.readline() #запоминаем всю строку
# #3. Закрываем файл, так как информация из него уже записана в переменную a
# f.close()
# #4. Вывели на печать текст из файла
# print(a)
# #5. Заменяем _ на пробелы
# a = a.replace('_',' ')
# print(a)
# #6. Разрываем строку по пробелам
# l = a.split(' ')
# print(l)
# #7. Найти числа и вывести сумму
# summa = 0
# for i in l:
#     if i.isdigit():
#         summa += int(i)
# print('Сумма:',summa)

#Task_2.
#Файл содержит числа и буквы.
# Каждый записан в отдельной строке.
# Нужно перевести содержимое файла в список так,
# чтобы сначала шли числа по возрастанию,
# а потом слова по возрастанию их длинны.
# with open('low.txt', 'r', encoding='utf8') as f:
#     l = f.readlines() #вытаскиваем все строки
# # print(l)
# # print('\nflkjjdf\n'.strip()) #strip удаляет пробелы и переносы по бокам
# chisla = [] #здесь будут слова
# slova = [] #здесь будут числа
# for i in l:
#     i = i.strip()
#     if i.isdigit(): chisla.append(int(i))
#     else: slova.append(i)
# print(chisla, slova)
#
# chisla.sort()
# slova.sort(key=len)
#
# print(chisla+slova)
#
# # Task_3
# Создать текстовый файл,
# записать в него построчно данные, которые вводит пользователь.
# Окончанием ввода пусть служит пустая строка.
# with open('newfile.txt', 'w', encoding='utf8') as n:
#     print('Для завершения введите пустую строку')
#     while True:
#         user_text = input('Введите данные: ')
#         if user_text == '': break
#         n.write(user_text + '\n')

# Task_4.
# В текстовом файле посчитать количество строк,
# а также для каждой отдельной строки определить количество в ней символов.
# with open('newfile.txt', 'r', encoding='utf8') as file:
#     lines = file.readlines() #вытаскиваем все строк
#     print("Количество строк:",len(lines)) #узнаем сколько строк
#     for line in lines:
#         print(line.strip(), len(line.strip()))

#ДЗ на вторник:
# 1. Есть список состоящий из слов и чисел,
# нужно записать в файл построчно сначала
# слова в порядке их длины, а после слов числа в порядке возрастания.

# 2. Добавьте на свой РАБОЧИЙ СТОЛ папку, в ней создайте 3 текстовых файла:
# test_1.txt, test_2.txt, test_3.txt.
# Затем переименуйте файлы на: rename_1.txt, rename_2.txt, rename_3.txt.
# После этого удалите созданную папку.
# Все операции выполнять с помощью встроенных функций библиотеки os
# Создаем именно на РАБОЧЕМ СТОЛЕ!!!




































# Git - система контроля версий


# При работе с гитом вся информация по гиту находится в папке .git

# Удалённые репозитории
# github.com
# bitbucker
# gitlab

# Состояние  файлов в ГИТ:

# 1)  неотслеживаемые (untracked) - все файлы до того, как добавили в гит
# 2) измененный (modified) - файл добавлен в гит и как-то изменён
# 3) подготовленный (staged) - такой файл мы выбрали, чтобы отправить на гитхаб
# 4) закомиченный (commited) - по файлу запомнили изменения


# Коммит - это объект в управлении гита. Коммит содержит все изменения за время этого коммита
# Коммит имеет набор информации
# 1) Коммиты пронумерованы
# 2) Имя автора
# 3) Дата создания
# 4) Комментарии - описание того, что было сделано за время этого коммита

# Ветка - указатель какого-то коммита
# Главная ветка называется "Мастер"

# Процесс работы с гитом
# Когда делают commit:
# * Создан новый функционал
# * добавлен новый блок сайта
# * Исправлены ошибки в коде
# * Вы закончили работу и хотите сохранить код











